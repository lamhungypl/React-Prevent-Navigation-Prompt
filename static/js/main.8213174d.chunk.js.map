{"version":3,"sources":["modal.js","example.js","index.js"],"names":["useNavigationPrompt","when","history","useHistory","useState","showPrompt","setShowPrompt","lastLocation","setLastLocation","confirmedNavigation","setConfirmedNavigation","cancelNavigation","useCallback","handleBlockedNavigation","nextLocation","confirmNavigation","useEffect","push","pathname","message","unblock","useRef","current","block","usePrompt","NavigateModal","blocking","centered","visible","onOk","onCancel","PreventingTransitionsExample","to","path","exact","children","BlockingForm","isBlocking","setIsBlocking","isSaving","setIsSaving","size","placeholder","onChange","event","onClick","ms","Promise","resolve","setTimeout","then","icon","LogoutOutlined","spin","disabled","ReactDOM","render","document","getElementById"],"mappings":"2RAwBMA,G,MAAsB,SAACC,GAC3B,IAAMC,EAAUC,cAD6B,EAETC,oBAAS,GAFA,mBAEtCC,EAFsC,KAE1BC,EAF0B,OAGLF,mBAAS,MAHJ,mBAGtCG,EAHsC,KAGxBC,EAHwB,OAISJ,oBAAS,GAJlB,mBAItCK,EAJsC,KAIjBC,EAJiB,KAMvCC,EAAmBC,uBAAY,WACnCN,GAAc,KACb,IAEGO,EAA0BD,uBAC9B,SAAAE,GACE,QAAKL,IACHH,GAAc,GACdE,EAAgBM,IACT,KAIX,CAACL,IAEGM,EAAoBH,uBAAY,WACpCN,GAAc,GACdI,GAAuB,KACtB,IAUH,OARAM,qBAAU,WACJP,GAAuBF,GACzBL,EAAQe,KAAKV,EAAaW,YAE3B,CAACT,EAAqBF,IA/CT,SAACY,EAASlB,GAC1B,IAAMC,EAAUC,cACViB,EAAUC,iBAAO,MACvBL,qBAAU,WAMR,OAJEI,EAAQE,QADNrB,EACgBC,EAAQqB,MAAMJ,GAEd,KAEb,WACDC,EAAQE,SACVF,EAAQE,aAGX,CAACrB,EAAMC,EAASiB,IAmCnBK,CAAUX,EAAyBZ,GAE5B,CAAEI,aAAYU,oBAAmBJ,sBAc3Bc,MAXf,YAA6D,IAApCC,EAAmC,EAAnCA,SAAmC,EACE1B,EAAoB0B,GAAxErB,EADkD,EAClDA,WAAYU,EADsC,EACtCA,kBAAmBJ,EADmB,EACnBA,iBACvC,OACE,oCACE,kBAAC,IAAD,CAAOgB,UAAQ,EAACC,QAASvB,EAAYwB,KAAMd,EAAmBe,SAAUnB,GAAxE,6FCnDS,SAASoB,IACtB,OACE,kBAAC,IAAD,KACE,4BACE,4BACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,QAAT,QAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,QAAT,SAIJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,SAAU,kBAACC,EAAD,QAChC,kBAAC,IAAD,CAAOH,KAAK,OAAOE,SAAU,qCAC7B,kBAAC,IAAD,CAAOF,KAAK,OAAOE,SAAU,uCAqGrC,SAASC,IAAgB,IAAD,EACchC,oBAAS,GADvB,mBACfiC,EADe,KACHC,EADG,OAEUlC,oBAAS,GAFnB,mBAEfmC,EAFe,KAELC,EAFK,KAYtB,OACE,8BACE,yCAAeH,EAAa,qEAAuE,QAEnG,kBAAC,EAAD,CAAeX,SAAUW,IACzB,2BACE,2BACEI,KAAK,KACLC,YAAY,sCACZC,SAAU,SAAAC,GACRN,GAAc,OAKpB,2BACE,kBAAC,IAAD,CAAQO,QAxBD,WAEX,OADAL,GAAY,IA5CDM,EA6CE,IA5CR,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,OA4C9BI,MAAK,WACrBV,GAAY,GACZF,GAAc,MA/CpB,IAAeQ,GAmEgBK,KAAMZ,EAAW,kBAACa,EAAA,EAAD,CAAgBC,MAAI,IAAM,KAAMC,UAAWjB,GAAcE,GAC9FA,EAAW,iBAAmB,kBCtJzCgB,IAASC,OACT,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.8213174d.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { Modal } from 'antd';\nimport { Location, UnregisterCallback } from 'history';\nimport { useHistory } from 'react-router-dom';\n\ninterface Props {}\n\nconst usePrompt = (message, when: boolean) => {\n  const history = useHistory();\n  const unblock = useRef(null);\n  useEffect(() => {\n    if (when) {\n      unblock.current = history.block(message);\n    } else {\n      unblock.current = null;\n    }\n    return () => {\n      if (unblock.current) {\n        unblock.current();\n      }\n    };\n  }, [when, history, message]);\n};\n\nconst useNavigationPrompt = (when: boolean) => {\n  const history = useHistory();\n  const [showPrompt, setShowPrompt] = useState(false);\n  const [lastLocation, setLastLocation] = useState(null);\n  const [confirmedNavigation, setConfirmedNavigation] = useState(false);\n\n  const cancelNavigation = useCallback(() => {\n    setShowPrompt(false);\n  }, []);\n\n  const handleBlockedNavigation = useCallback(\n    nextLocation => {\n      if (!confirmedNavigation) {\n        setShowPrompt(true);\n        setLastLocation(nextLocation);\n        return false;\n      }\n      return true;\n    },\n    [confirmedNavigation]\n  );\n  const confirmNavigation = useCallback(() => {\n    setShowPrompt(false);\n    setConfirmedNavigation(true);\n  }, []);\n\n  useEffect(() => {\n    if (confirmedNavigation && lastLocation) {\n      history.push(lastLocation.pathname);\n    }\n  }, [confirmedNavigation, lastLocation]);\n\n  usePrompt(handleBlockedNavigation, when);\n\n  return { showPrompt, confirmNavigation, cancelNavigation };\n};\n\nfunction NavigateModal({ blocking }: { blocking: boolean }) {\n  const { showPrompt, confirmNavigation, cancelNavigation } = useNavigationPrompt(blocking);\n  return (\n    <>\n      <Modal centered visible={showPrompt} onOk={confirmNavigation} onCancel={cancelNavigation}>\n        Changes have been made Do you want to discard the changes and go back to previous page?\n      </Modal>\n    </>\n  );\n}\nexport { useNavigationPrompt, NavigateModal };\nexport default NavigateModal;\n","import React, { useState, useRef, useEffect, useCallback } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link, useHistory } from 'react-router-dom';\nimport { Button, Modal } from 'antd';\nimport { LogoutOutlined } from '@ant-design/icons';\n\nimport 'antd/dist/antd.css';\nimport NavigateModal from './modal';\n\n// Sometimes you want to prevent the user from\n// navigating away from a page. The most common\n// use case is when they have entered some data\n// into a form but haven't submitted it yet, and\n// you don't want them to lose it.\n\nexport default function PreventingTransitionsExample() {\n  return (\n    <Router>\n      <ul>\n        <li>\n          <Link to=\"/\">Form</Link>\n        </li>\n        <li>\n          <Link to=\"/one\">One</Link>\n        </li>\n        <li>\n          <Link to=\"/two\">Two</Link>\n        </li>\n      </ul>\n\n      <Switch>\n        <Route path=\"/\" exact children={<BlockingForm />} />\n        <Route path=\"/one\" children={<h3>One</h3>} />\n        <Route path=\"/two\" children={<h3>Two</h3>} />\n      </Switch>\n    </Router>\n  );\n}\n\nfunction usePrompt(message, when) {\n  const history = useHistory();\n  const unblock = useRef(null);\n\n  useEffect(() => {\n    if (when) {\n      unblock.current = history.block(message);\n    } else {\n      unblock.current = null;\n    }\n    return () => {\n      if (unblock.current) {\n        unblock.current();\n      }\n    };\n  }, [when, history, message]);\n}\n\nfunction useCallbackPrompt(when) {\n  const history = useHistory();\n  const [showPrompt, setShowPrompt] = useState(false);\n  const [lastLocation, setLastLocation] = useState(null);\n  const [confirmedNavigation, setConfirmedNavigation] = useState(false);\n\n  const cancelNavigation = useCallback(() => {\n    setShowPrompt(false);\n  }, []);\n\n  const handleBlockedNavigation = useCallback(\n    nextLocation => {\n      if (!confirmedNavigation) {\n        setShowPrompt(true);\n        setLastLocation(nextLocation);\n        return false;\n      }\n      return true;\n    },\n    [confirmedNavigation]\n  );\n\n  const confirmNavigation = useCallback(() => {\n    setShowPrompt(false);\n    setConfirmedNavigation(true);\n  }, []);\n\n  useEffect(() => {\n    if (confirmedNavigation && lastLocation) {\n      history.push(lastLocation.pathname);\n    }\n  }, [confirmedNavigation, lastLocation]);\n\n  usePrompt(handleBlockedNavigation, when);\n\n  return { showPrompt, confirmNavigation, cancelNavigation };\n}\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nfunction SavePrompt({ isBlocking, isSaving, onSave }) {\n  const { showPrompt, confirmNavigation, cancelNavigation } = useCallbackPrompt(isBlocking);\n  return (\n    <Modal\n      title=\"You have unsaved changes\"\n      visible={showPrompt}\n      onOk={confirmNavigation}\n      onCancel={cancelNavigation}\n      closable={!isSaving}\n      maskClosable={!isSaving}\n      footer={[\n        <Button key=\"cancel\" disabled={isSaving} type=\"default\" onClick={cancelNavigation}>\n          Cancel\n        </Button>,\n        <Button key=\"discard\" disabled={!isBlocking || isSaving} type=\"danger\" onClick={confirmNavigation}>\n          Discard changes & Exit\n        </Button>,\n        <Button\n          key=\"save\"\n          disabled={!isBlocking || isSaving}\n          type=\"primary\"\n          icon={isSaving ? <LogoutOutlined spin /> : null}\n          onClick={() => {\n            onSave().then(() => confirmNavigation());\n          }}\n        >\n          {isSaving ? 'Saving changes' : 'Save changes & Exit'}\n        </Button>,\n      ]}\n    >\n      <p>What do you want to do?</p>\n    </Modal>\n  );\n}\n\nfunction BlockingForm() {\n  const [isBlocking, setIsBlocking] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n\n  const save = () => {\n    setIsSaving(true);\n    return sleep(100).then(() => {\n      setIsSaving(false);\n      setIsBlocking(false);\n    });\n  };\n\n  return (\n    <form>\n      <p>Blocking?? {isBlocking ? 'Yes, you have unsaved changes. Try to navigate to a different page' : 'Nope'}</p>\n      {/* <SavePrompt isBlocking={isBlocking} isSaving={isSaving} onSave={save} /> */}\n      <NavigateModal blocking={isBlocking} />\n      <p>\n        <input\n          size=\"50\"\n          placeholder=\"type something to block transitions\"\n          onChange={event => {\n            setIsBlocking(true);\n          }}\n        />\n      </p>\n\n      <p>\n        <Button onClick={save} icon={isSaving ? <LogoutOutlined spin /> : null} disabled={!isBlocking || isSaving}>\n          {isSaving ? 'Saving changes' : 'Save changes'}\n        </Button>\n      </p>\n    </form>\n  );\n}\n","/**\n  This CodeSandbox has been automatically generated using\n  `codesandboxer`. If you're curious how that happened, you can\n  check out our docs here: https://github.com/codesandbox/codesandboxer\n\n  If you experience any struggles with this sandbox, please raise an issue\n  on github. :)\n*/\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './example';\n\nReactDOM.render(\n<App />,\ndocument.getElementById('root')\n);"],"sourceRoot":""}